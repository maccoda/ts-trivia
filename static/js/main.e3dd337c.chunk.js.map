{"version":3,"sources":["service/HtmlCodeConverter.ts","service/QuestionConverter.ts","service/TriviaApi.ts","components/AnswerOption.tsx","components/AnswerTable.tsx","components/ResponseLabel.tsx","components/Question.tsx","service/ShuffleArray.ts","components/App.tsx","registerServiceWorker.js","index.tsx"],"names":["HtmlCodeConverter","s","element","document","createElement","innerHTML","childNodes","nodeValue","ConvertApiDataToModel","apiModel","answers","incorrect_answers","map","x","text","convertFromHtml","correct","push","correct_answer","questionText","question","TriviaApi","axios","get","this","URL","then","data","results","AnswerOption","className","type","name","props","onChange","handleChange","checked","AnswerValue","React","ButtonText","ResponseLabel","AnswerTable","bind","handleSubmit","state","buttonText","Submit","responseText","selected","event","preventDefault","Next","setState","correctCallback","correctAnswer","target","value","answerOptions","idx","key","onSubmit","length","Question","shuffledArray","ar","j","i","Math","floor","random","shuffle","findIndex","App","next","currentIndex","loading","questions","questionsAnswered","model","fetchQuestions","currQuestion","title","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","getElementById","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kOAAqBA,E,6GACWC,GAC5B,IAAMC,EAAUC,SAASC,cAAc,OAEvC,OADAF,EAAQG,UAAYJ,EACbC,EAAQI,WAAW,GAAGC,WAAa,O,KCU/BC,EATe,SAACC,GAC3B,IAAMC,EAAyBD,EAASE,kBACnCC,KAAI,SAACC,GAAD,MAAQ,CAACC,KAAMd,EAAkBe,gBAAgBF,GAAIG,SAAS,MAEvE,OADAN,EAAQO,KAAK,CAACH,KAAMd,EAAkBe,gBAAgBN,EAASS,gBAAiBF,SAAS,IAClF,CACHN,UACAS,aAAcnB,EAAkBe,gBAAgBN,EAASW,Y,0CCR5CC,E,sOAIVC,IAAMC,IAAIC,KAAKC,KAAKC,MAAK,SAACb,GAAD,OAAOA,EAAEc,KAAKC,Y,6GAJ7BP,EACLI,IAAM,wC,ICKDI,E,ulBAKjB,OACE,uBAAKC,UAAU,iBACb,6BACE,yBACEC,KAAK,QACLC,KAAMR,KAAKS,MAAMD,KACjBE,SAAUV,KAAKS,MAAME,aACrBC,UAASZ,KAAKS,MAAMG,SAAUZ,KAAKS,MAAMD,OAASK,EAAYb,KAAKS,MAAMG,WAE1EZ,KAAKS,MAAMnB,W,GAdoBwB,a,ICC9BD,EASPE,ECbgBC,E,ulBAKjB,OACE,2BACE,uBAAKV,UAAU,OACb,uBAAKA,UAAU,UACb,0BAAKN,KAAKS,MAAMnB,a,GATewB,c,SDI/BD,O,SAAAA,I,SAAAA,I,SAAAA,I,UAAAA,M,cASPE,O,mBAAAA,I,gBAAAA,M,SAUgBE,E,keAInB,WAAYR,GAA0B,IAAD,8BACnC,cAAMA,IACDE,aAAe,EAAKA,aAAaO,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,MAAQ,CACXC,WAAYN,EAAWO,OACvBC,aAAc,GACdC,SAAU,MAPuB,E,yDAWjBC,GAClBA,EAAMC,iBACF1B,KAAKoB,MAAMC,aAAeN,EAAWY,MACvC3B,KAAK4B,SAAS,CAAEL,aAAc,GAAIF,WAAYN,EAAWO,SACzDtB,KAAKS,MAAMoB,mBACF7B,KAAKS,MAAMqB,gBAAkB9B,KAAKoB,MAAMI,SACjDxB,KAAK4B,SAAS,CACZP,WAAYN,EAAWY,KACvBJ,aAAc,oBACdC,SAAU,OAGZxB,KAAK4B,SAAS,CAAEL,aAAc,4B,mCAIdE,GAClB,IAAMjB,EAA2BiB,EAAMM,OAAOvB,KACxCwB,EAAqBnB,EAAYL,GAEvCR,KAAK4B,SAAS,CAAEJ,SAAUQ,M,+BAGX,IAAD,OACRC,EAAgBjC,KAAKS,MAAMvB,QAAQE,KAAI,SAACC,EAAG6C,GAC/C,OACE,gBAAC,EAAD,CACEC,IAAKD,EACL5C,KAAMD,EAAEC,KACRkB,KAAMK,EAAYqB,GAClBtB,QAAS,EAAKQ,MAAMI,SACpBb,aAAc,EAAKA,kBAKzB,OACE,2BACE,wBAAMyB,SAAUpC,KAAKmB,cACnB,uBAAKb,UAAU,OACb,uBAAKA,UAAU,UACb,uBAAKA,UAAU,gCACZ2B,EAAc,GACdA,EAAc,MAIpBA,EAAcI,OAAS,GACtB,uBAAK/B,UAAU,OACb,uBAAKA,UAAU,UACb,uBAAKA,UAAU,gCACZ2B,EAAc,GACdA,EAAc,MAKvB,yBAAO1B,KAAK,SAASyB,MAAOjB,EAAWf,KAAKoB,MAAMC,eAEpD,gBAAC,EAAD,CAAe/B,KAAMU,KAAKoB,MAAMG,oB,GA1ECT,a,IElBpBwB,E,ulBAEjB,IAAMC,ECZH,SAAoBC,GACzB,IACE,IAAIC,EAAGpD,EAAGqD,EAAIF,EAAGH,OACjBK,EACAD,EAAIE,KAAKC,MAAMD,KAAKE,SAAWH,GAAIrD,EAAImD,IAAKE,GAAIF,EAAGE,GAAKF,EAAGC,GAAID,EAAGC,GAAKpD,GAEzE,OAAOmD,EDMiBM,CAAQ9C,KAAKS,MAAMvB,SACzC,OACE,2BACE,uBAAKoB,UAAU,OACb,uBAAKA,UAAU,UACb,0BAAKN,KAAKS,MAAMd,gBAGpB,uBAAKW,UAAU,OACb,uBAAKA,UAAU,UACb,gBAAC,EAAD,CACEpB,QAASqD,EACTV,gBAAiB7B,KAAKS,MAAMoB,gBAC5BC,cAAeS,EAAcQ,WAAU,SAAC1D,GAAD,OAAOA,EAAEG,oB,GAfxBsB,a,IEMjBkC,E,keACnB,WAAYvC,GAAkB,IAAD,8BAC3B,cAAMA,IACDwC,KAAO,EAAKA,KAAK/B,KAAV,gBACZ,EAAKE,MAAQ,CACX8B,aAAc,EACdC,SAAS,EACTC,UAAW,GACXC,kBAAmB,GAPM,E,6DAWJ,IAAD,OACtBrD,KAAK4B,SAAS,CAAEuB,SAAS,IACzBtD,EAAUE,MAAMG,MAAK,SAACb,GACpB,IAAMiE,EAAQjE,EAAED,KAAI,SAACQ,GAAD,OAAcZ,EAAsBY,MACxD,EAAKgC,SAAS,CAAEwB,UAAWE,EAAOJ,aAAc,EAAGC,SAAS,S,2CAI9DnD,KAAKuD,mB,6BAIDvD,KAAKoB,MAAM8B,aAAelD,KAAKoB,MAAMgC,UAAUf,OAAS,EAC1DrC,KAAK4B,SAAS,CAAEsB,aAAclD,KAAKoB,MAAM8B,aAAe,IAExDlD,KAAKuD,iBAEPvD,KAAK4B,SAAS,CAAEyB,kBAAmBrD,KAAKoB,MAAMiC,kBAAoB,M,+BAIlE,GAAIrD,KAAKoB,MAAM+B,QACb,OACE,uBAAK7C,UAAU,aACb,uBAAKA,UAAU,UACb,uBAAKA,UAAU,aAKvB,IAAMkD,EAAexD,KAAKoB,MAAMgC,UAAUpD,KAAKoB,MAAM8B,cACrD,OACE,uBAAK5C,UAAU,aACb,uBAAKA,UAAU,OACb,uBAAKA,UAAU,UACb,0BAAKN,KAAKS,MAAMgD,SAGpB,uBAAKnD,UAAU,OAAf,uBACuBN,KAAKoB,MAAMiC,mBAElC,uBAAK/C,UAAU,OACb,uBAAKA,UAAU,mBACb,gBAAC,EAAD,CACEX,aAAc6D,EAAa7D,aAC3BT,QAASsE,EAAatE,QACtB2C,gBAAiB7B,KAAKiD,c,GA1DHnC,aCP3B4C,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT/D,MAAK,SAAAmE,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnD,QACf8C,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCzEjEC,SAAgB,gBAAC,EAAD,CAAKtB,MAAM,cAAgB9E,SAASqG,eAAe,SDcpD,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIjE,IAAIgF,aAAwBrB,OAAOC,UAC3CqB,SAAWtB,OAAOC,SAASqB,OAIvC,OAGFtB,OAAOuB,iBAAiB,QAAQ,WAC9B,IAAMlB,EAAK,UAAMgB,aAAN,sBAEPvB,IAiDV,SAAiCO,GAE/BmB,MAAMnB,GACH/D,MAAK,SAAAmF,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQxF,IAAI,gBAAgByF,QAAQ,cAG7CtB,UAAUC,cAAcsB,MAAMvF,MAAK,SAAAmE,GACjCA,EAAaqB,aAAaxF,MAAK,WAC7B0D,OAAOC,SAAS8B,eAKpB3B,EAAgBC,MAGnBY,OAAM,WACLF,QAAQC,IACN,oEArEAgB,CAAwB3B,GAIxBC,UAAUC,cAAcsB,MAAMvF,MAAK,WACjCyE,QAAQC,IACN,gHAMJZ,EAAgBC,OCzCxB4B,I","file":"static/js/main.e3dd337c.chunk.js","sourcesContent":["export default class HtmlCodeConverter {\n  public static convertFromHtml(s: string): string {\n    const element = document.createElement('div')\n    element.innerHTML = s\n    return element.childNodes[0].nodeValue || ''\n  }\n}\n","import AnswerModel from '../model/AnswerModal'\nimport QuestionModel from '../model/QuestionModel'\nimport TriviaApiQuestion from '../model/TriviaApiQuestion'\nimport HtmlCodeConverter from './HtmlCodeConverter'\n\nconst ConvertApiDataToModel = (apiModel: TriviaApiQuestion): QuestionModel => {\n    const answers: AnswerModel[] = apiModel.incorrect_answers\n        .map((x) => ({text: HtmlCodeConverter.convertFromHtml(x), correct: false}))\n    answers.push({text: HtmlCodeConverter.convertFromHtml(apiModel.correct_answer), correct: true})\n    return {\n        answers,\n        questionText: HtmlCodeConverter.convertFromHtml(apiModel.question),\n    }\n}\nexport default ConvertApiDataToModel\n","import axios from 'axios'\nimport TriviaApiQuestion from '../model/TriviaApiQuestion'\n\nexport default class TriviaApi {\n  public static URL = 'https://opentdb.com/api.php?amount=10'\n\n  public static async get(): Promise<TriviaApiQuestion[]> {\n    return axios.get(this.URL).then((x) => x.data.results)\n  }\n}\n","import * as React from 'react'\nimport { AnswerValue } from './AnswerTable'\nexport interface AnswerOptionProps {\n  text: string\n  name: string\n  checked: AnswerValue | null\n  handleChange(event: React.ChangeEvent<HTMLInputElement>): void\n}\n\nexport default class AnswerOption extends React.Component<\n  AnswerOptionProps,\n  any\n> {\n  public render() {\n    return (\n      <div className='answer-option'>\n        <label>\n          <input\n            type='radio'\n            name={this.props.name}\n            onChange={this.props.handleChange}\n            checked={this.props.checked ? this.props.name === AnswerValue[this.props.checked]: false}\n          />\n          {this.props.text}\n        </label>\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport AnswerModel from '../model/AnswerModal'\nimport AnswerOption from './AnswerOption'\nimport ResponseLabel from './ResponseLabel'\n\nexport interface AnswerTableProps {\n  answers: AnswerModel[]\n  correctAnswer: AnswerValue\n  correctCallback(): void\n}\nexport enum AnswerValue {\n  A,\n  B,\n  C,\n  D,\n}\n\ntype AnswerValueStrings = keyof typeof AnswerValue;\n\nenum ButtonText {\n  'Submit',\n  'Next',\n}\ninterface AnswerTableState {\n  selected: AnswerValue | null\n  responseText: string\n  buttonText: ButtonText\n}\n\nexport default class AnswerTable extends React.Component<\n  AnswerTableProps,\n  AnswerTableState\n> {\n  constructor(props: AnswerTableProps) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.state = {\n      buttonText: ButtonText.Submit,\n      responseText: '',\n      selected: null,\n    }\n  }\n\n  public handleSubmit(event: any) {\n    event.preventDefault()\n    if (this.state.buttonText === ButtonText.Next) {\n      this.setState({ responseText: '', buttonText: ButtonText.Submit })\n      this.props.correctCallback()\n    } else if (this.props.correctAnswer === this.state.selected) {\n      this.setState({\n        buttonText: ButtonText.Next,\n        responseText: 'That was correct!',\n        selected: null,\n      })\n    } else {\n      this.setState({ responseText: 'That was incorrect :(' })\n    }\n  }\n\n  public handleChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const name: AnswerValueStrings = event.target.name as AnswerValueStrings\n    const value: AnswerValue = AnswerValue[name]\n\n    this.setState({ selected: value })\n  }\n\n  public render() {\n    const answerOptions = this.props.answers.map((x, idx) => {\n      return (\n        <AnswerOption\n          key={idx}\n          text={x.text}\n          name={AnswerValue[idx]}\n          checked={this.state.selected}\n          handleChange={this.handleChange}\n        />\n      )\n    })\n\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <div className='row'>\n            <div className='col-md'>\n              <div className='form-check form-check-inline'>\n                {answerOptions[0]}\n                {answerOptions[1]}\n              </div>\n            </div>\n          </div>\n          {answerOptions.length > 2 && (\n            <div className='row'>\n              <div className='col-md'>\n                <div className='form-check form-check-inline'>\n                  {answerOptions[2]}\n                  {answerOptions[3]}\n                </div>\n              </div>\n            </div>\n          )}\n          <input type='submit' value={ButtonText[this.state.buttonText]} />\n        </form>\n        <ResponseLabel text={this.state.responseText} />\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\n\nexport interface ResponseLabelProps {\n  text: string\n}\n\nexport default class ResponseLabel extends React.Component<\n  ResponseLabelProps,\n  any\n> {\n  public render() {\n    return (\n      <div>\n        <div className='row'>\n          <div className='col-md'>\n            <h4>{this.props.text}</h4>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport AnswerModel from '../model/AnswerModal'\nimport { shuffle } from '../service/ShuffleArray'\nimport AnswerTable from './AnswerTable'\n\nexport interface QuestionProps {\n  questionText: string\n  answers: AnswerModel[]\n  correctCallback(): void\n}\n\nexport default class Question extends React.Component<QuestionProps, any> {\n  public render() {\n    const shuffledArray = shuffle(this.props.answers)\n    return (\n      <div>\n        <div className='row'>\n          <div className='col-md'>\n            <h3>{this.props.questionText}</h3>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-md'>\n            <AnswerTable\n              answers={shuffledArray}\n              correctCallback={this.props.correctCallback}\n              correctAnswer={shuffledArray.findIndex((x) => x.correct)}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","/* tslint:disable */\nexport function shuffle<T>(ar: T[]): T[] {\n  for (\n    let j, x, i = ar.length;\n    i;\n    j = Math.floor(Math.random() * i), x = ar[--i], ar[i] = ar[j], ar[j] = x\n  ) {}\n  return ar;\n}\n","import * as React from 'react';\nimport QuestionModel from '../model/QuestionModel';\nimport ConvertApiDataToModel from '../service/QuestionConverter';\nimport TriviaApi from '../service/TriviaApi';\nimport Question from './Question';\n\nexport interface AppProps {\n  title: string;\n}\n\ninterface AppState {\n  questions: QuestionModel[];\n  currentIndex: number\n  loading: boolean;\n  questionsAnswered: number\n}\n\nexport default class App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props)\n    this.next = this.next.bind(this)\n    this.state = {\n      currentIndex: 0,\n      loading: false,\n      questions: [],\n      questionsAnswered: 0\n    }\n  }\n\n  public fetchQuestions() {\n    this.setState({ loading: true })\n    TriviaApi.get().then((x) => {\n      const model = x.map((question) => ConvertApiDataToModel(question))\n      this.setState({ questions: model, currentIndex: 0, loading: false })\n    })\n  }\n  public componentWillMount() {\n    this.fetchQuestions()\n  }\n\n  public next() {\n    if (this.state.currentIndex < this.state.questions.length - 1) {\n      this.setState({ currentIndex: this.state.currentIndex + 1 })\n    } else {\n      this.fetchQuestions()\n    }\n    this.setState({ questionsAnswered: this.state.questionsAnswered + 1 })\n  }\n\n  public render(): JSX.Element {\n    if (this.state.loading) {\n      return (\n        <div className='container'>\n          <div className='center'>\n            <div className='loader' />\n          </div>\n        </div>\n      )\n    }\n    const currQuestion = this.state.questions[this.state.currentIndex]\n    return (\n      <div className='container'>\n        <div className='row'>\n          <div className='col-md'>\n            <h1>{this.props.title}</h1>\n          </div>\n        </div>\n        <div className='row'>\n          Questions answered: {this.state.questionsAnswered}\n        </div>\n        <div className='row'>\n          <div className='col-md question'>\n            <Question\n              questionText={currQuestion.questionText}\n              answers={currQuestion.answers}\n              correctCallback={this.next}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport './App.css'\nimport App from './components/App'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App title='Quiz Game' />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}